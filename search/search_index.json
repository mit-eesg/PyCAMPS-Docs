{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyCAMPS","text":"<p>PyCAMPS is a Python library for building, solving, analyzing, and simulating power systems, all with a user-friendly GUI. For more information about our PyPI package, visit our PyPI page.</p> <p>Our package is a Python version of the Centralized Automated Modeling of Power Systems library developed by the MIT Electric Energy Systems Group, led by Professor Marija Ilic. For more information and updates, please visit our website.</p>"},{"location":"#license","title":"License","text":"<p>PyCAMPS is licensed under the CC-BY-NC-4.0 license. This software is licensed for educational and personal use only. It may not be used for research or commercial purposes without explicit permission from the authors.</p>"},{"location":"api_reference/","title":"API Reference","text":""},{"location":"api_reference/#overview","title":"Overview","text":"<p>PyCAMPS consists of several different classes and functions that allow the user to create and analyze power systems. Dynamic components of power systems are implemented in Modules, while the tools to simulate the modules and the overall  system lie in Simulation. For other extra functions, reference Miscellaneous.</p>"},{"location":"api_reference/#modules","title":"Modules","text":"<p>Modules are the building blocks of PyCAMPS. They are used to represent different components of a power system, such as buses, lines, and generators. Each module can be classified as a generator, load, wire, renewable, storage, or other system element.</p>"},{"location":"api_reference/#pycamps.modules.Module","title":"<code>pycamps.modules.Module</code>","text":"<p>This module serves as a superclass to all dynamic component modules in the power system. </p> <p>Attributes:</p> Name Type Description <code>ModuleName</code> <code>str</code> <p>The name of the module.</p> <code>RefFrameAngle</code> <code>Symbol</code> <p>The angular position of the DQ reference frame.</p> <code>RefFrameSpeed</code> <code>Symbol</code> <p>The angular speed of the DQ reference frame.</p> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system (inverse of time units).</p> <code>ParameterMap</code> <code>dict</code> <p>A dictionary mapping parameter names to their values or functions.</p> <code>Parameters</code> <code>Matrix</code> <p>A matrix of symbolic parameters for the module (inductances, capacitances, etc).</p> <code>ControllerGains</code> <code>Matrix</code> <p>Gains of controllers.</p> <code>SetPoints</code> <code>Matrix</code> <p>Set points for controllers.</p> <code>StateVariables</code> <code>Matrix</code> <p>A matrix of symbolic state variables for the module.</p> <code>StateSpaceEquations</code> <code>Matrix</code> <p>A matrix of state space equations.</p> <code>StateVariableDerivatives</code> <code>Matrix</code> <p>A matrix of derivatives of state variables.</p> <code>PortInputs</code> <code>Matrix</code> <p>Inputs to the module from other modules.</p> <code>PortStates</code> <code>Matrix</code> <p>States of the module.</p> <code>PortVoltages</code> <code>Matrix</code> <p>Voltages at the ports.</p> <code>PortCurrents</code> <code>Matrix</code> <p>Currents at the ports.</p> <code>PortStates_Time</code> <code>Matrix</code> <p>Time-dependent states of the module.</p> <code>PortStateDerivatives</code> <code>Matrix</code> <p>Derivatives of the port states.</p> <code>PortOutputTypes</code> <code>Matrix</code> <p>Types of outputs from the ports (current or charge).</p> <code>ControllableInputs</code> <code>Matrix</code> <p>Inputs that can be controlled, typically for passivity-based control.</p> <code>InternalInputs</code> <code>Matrix</code> <p>Inputs that are internal to the module.</p> <code>ControlInputEquations</code> <code>Matrix</code> <p>Mathematical equations for controllable inputs.</p> <code>InternalEquations</code> <code>Matrix</code> <p>Internal equations of the module.</p> <code>DesiredStateVariables</code> <code>Matrix</code> <p>Desired state variables for underactuated systems.</p> <code>DesiredStateVariableDerivatives</code> <code>Matrix</code> <p>Derivatives of the desired state variables.</p> <code>DesiredStateSpace</code> <code>Matrix</code> <p>Desired state space representation.</p> <code>SetPointOutputs</code> <code>Matrix</code> <p>Outputs that are sent to another module.</p> <code>SetPointOutputEquations</code> <code>Matrix</code> <p>Equations for set point outputs.</p> <code>GTemp</code> <code>Matrix</code> <p>Temporary matrix for calculations.</p> <code>Units</code> <code>list of str</code> <p>The units of the state variables, which depend on the base speed.</p> <code>Data</code> <code>Matrix</code> <p>Additional data related to the module.</p> <code>StateSpace</code> <code>StateSpace</code> <p>State space representation of the module.</p>"},{"location":"api_reference/#generators","title":"Generators","text":"<p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import SMOneAxis\n    sm = SMOneAxis('G1', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import Type4_1\n    sm = Type4_1('G1', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import Type4_1Gc\n    sm = Type4_1Gc('G1', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import Type4_2\n    sm = Type4_2('G1', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import Type4_2Ec\n    sm = Type4_2Ec('G1', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import SM7StateControl\n    sm = SM7StateControl('G22', BaseSpeed=377)\n</code></pre></p>"},{"location":"api_reference/#pycamps.modules.SMOneAxis","title":"<code>pycamps.modules.SMOneAxis</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents the one axis model of synchronous machine.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/#pycamps.modules.Type4_1","title":"<code>pycamps.modules.Type4_1</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a standard Type 4-1 model of a synchronous machine.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/#pycamps.modules.Type4_1Gc","title":"<code>pycamps.modules.Type4_1Gc</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a standard Type 4-1 model of a synchronous machine with governor control.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/#pycamps.modules.Type4_2","title":"<code>pycamps.modules.Type4_2</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a standard Type 4-2 model of a synchronous machine.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/#pycamps.modules.Type4_2Ec","title":"<code>pycamps.modules.Type4_2Ec</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a standard Type 4-2 model of a synchronous machine with excitation control.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/#pycamps.modules.SM7StateControl","title":"<code>pycamps.modules.SM7StateControl</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a synchronous machine with the seven state variables and control. WARNING: This module is still under development and is not yet functional</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code> Example <p>from sympy import symbols from pycamps.modules import SM7StateControl sm = SM7StateControl('G1', RefFrameAngle=symbols('phi'), RefFrameSpeed=symbols('dphidt'), BaseSpeed=377)</p>"},{"location":"api_reference/#loads","title":"Loads","text":"<p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import PQLoad\n    load = PQLoad('L1', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import RLLoad\n    load = RLLoad('L1', BaseSpeed=377)\n</code></pre></p>"},{"location":"api_reference/#pycamps.modules.PQLoad","title":"<code>pycamps.modules.PQLoad</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a PQ load in a power system.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/#pycamps.modules.RLLoad","title":"<code>pycamps.modules.RLLoad</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a constant impedance load with resistance and inductance.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/#wires","title":"Wires","text":"<p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import LongLine\n    long_line = LongLine('TL_1_2', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import ShortLine\n    line = ShortLine('TL_1_2', BaseSpeed=377)\n</code></pre></p>"},{"location":"api_reference/#pycamps.modules.LongLine","title":"<code>pycamps.modules.LongLine</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a long transmission line model with resistance, capacitance, and inductances.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/#pycamps.modules.ShortLine","title":"<code>pycamps.modules.ShortLine</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a short transmission line model with series impedance.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/#renewables","title":"Renewables","text":"<p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import PVSOAControl\n    pv = PVSOAControl('PV1', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import PVSOAControlV2\n    pv = PVSOAControlV2('PV1', BaseSpeed=377)\n</code></pre></p>"},{"location":"api_reference/#pycamps.modules.PVSOAControl","title":"<code>pycamps.modules.PVSOAControl</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a solar PV model with SOA control.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/#pycamps.modules.PVSOAControlV2","title":"<code>pycamps.modules.PVSOAControlV2</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a solar PV model with SOA control.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>Mode</code> <code>str</code> <p>The mode of operation. Defaults to 'PQ'. Options are 'PQ' or 'Vt'.</p> <code>'PQ'</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/#storage","title":"Storage","text":"<p>Coming soon!</p>"},{"location":"api_reference/#system-elements","title":"System Elements","text":"<p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import InfBus\n    inf_bus = InfBus('Bus1', BaseSpeed=377)\n</code></pre></p>"},{"location":"api_reference/#pycamps.modules.InfBus","title":"<code>pycamps.modules.InfBus</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents an infinite bus with a constant voltage source and series impedance.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/#simulation-tools","title":"Simulation Tools","text":"<p>Example: <pre><code>    from pycamps.simulation import PowerSystem\n    from pycamps.modules import ShortLine, SMOneAxis, PQLoad\n    # Create modules like you normally would    \n    modules = [ShortLine(...), SMOneAxis(...), PQLoad(...)]\n    # Create and connect buses using the following format:\n    # [[(non-wire1), (wire1, 'terminal')],\n    #  [(non-wire2), (wire1, 'other_terminal')]]\n    buses = [[(modules[0], 'L'), (modules[1])],\n     [(modules[0], 'R'), (modules[2])]]\n    ps = PowerSystem(\"MyPowerSystem\", modules, buses)\n    print(ps.StateSpaceEquations)\n</code></pre></p> <p>Example: <pre><code>    from pycamps.simulation import PowerSystem, Dynamics\n    ps = PowerSystem(...) # Create power system like normal\n    dynamics = Dynamics(ps)\n    print(dynamics.get_required_parameters())\n    dynamics.load_new_params(params_directory='path/to/params/')\n    equilibrium = dynamics.solve_equilibrium()\n    time, states = dynamics.simulate_trajectory()\n    A, sub_pf, states = dynamics.linearized_analysis()\n</code></pre></p> <p>Example: <pre><code>    from pycamps.simulation import StateSpace, PowerSystem\n    ps = PowerSystem(...) # Create power system like normal\n    ss = StateSpace.from_power_system(ps)\n    ss.print_equations()\n</code></pre></p>"},{"location":"api_reference/#pycamps.simulation.power_system.PowerSystem","title":"<code>pycamps.simulation.power_system.PowerSystem</code>","text":"<p>Represents a power system composed of various modules and buses.</p> <p>Parameters:</p> Name Type Description Default <code>SystemName</code> <code>str</code> <p>A unique identifier for the system. This is used to create names for exported files and logs.</p> required <code>Modules</code> <code>list</code> <p>A list of modules (e.g. generators, loads, transmission lines) that make up the power system.</p> required <code>Buses</code> <code>list</code> <p>A list of buses, where each bus contains a list of modules connected to it.</p> required <p>Attributes:</p> Name Type Description <code>Units</code> <code>list</code> <p>Units for the state variables.</p> <code>StateSpace</code> <code>StateSpace</code> <p>State space representation of the system.</p> <code>KCLEquations</code> <code>Matrix</code> <p>KCL equations for the system.</p> <code>G</code> <code>ndarray</code> <p>G-matrix representing the connections between modules.</p> <code>StateVariableDerivatives</code> <code>Matrix</code> <p>Derivatives of the state variables.</p> <code>StateSpaceEquations</code> <code>Matrix</code> <p>State space equations for the system.</p> <code>DesiredStateVariableDerivatives</code> <code>Matrix</code> <p>Desired derivatives of the state variables.</p> <code>DesiredStateSpace</code> <code>Matrix</code> <p>Desired state space equations.</p> <code>ControllableInputs</code> <code>Matrix</code> <p>Inputs that can be controlled.</p> <code>InternalInputs</code> <code>Matrix</code> <p>Internal inputs to the system.</p> <code>ControlInputEquations</code> <code>Matrix</code> <p>Equations for control inputs.</p> <code>SetPointOutputs</code> <code>Matrix</code> <p>Outputs for set points.</p> <code>SetPointOutputEquations</code> <code>Matrix</code> <p>Equations for set point outputs.</p> <code>StateVariables</code> <code>Matrix</code> <p>State variables of the system.</p> <code>DesiredStateVariables</code> <code>Matrix</code> <p>Desired state variables.</p> <code>InternalEquations</code> <code>Matrix</code> <p>Internal equations of the system.</p> <code>Parameters</code> <code>Matrix</code> <p>Parameters of the system.</p> <code>SetPoints</code> <code>Matrix</code> <p>Set points for the system.</p> <code>ControllerGains</code> <code>Matrix</code> <p>Gains for the controllers.</p>"},{"location":"api_reference/#pycamps.simulation.dynamics.Dynamics","title":"<code>pycamps.simulation.dynamics.Dynamics</code>","text":"<p>Simulates the dynamics of a power system.</p> <p>Parameters:</p> Name Type Description Default <code>power_system</code> <code>PowerSystem</code> <p>The power system object containing modules and buses.</p> required <p>Attributes:</p> Name Type Description <code>PS</code> <code>PowerSystem</code> <p>The power system object.</p> <code>params</code> <code>dict</code> <p>A dictionary of parameters for the modules.</p> <code>input_states</code> <code>list</code> <p>A list of input state variables.</p> <code>input_equations</code> <code>list</code> <p>A list of input equations.</p> <code>required_params</code> <code>dict</code> <p>A dictionary mapping module names to their required parameters.</p>"},{"location":"api_reference/#pycamps.simulation.dynamics.Dynamics.get_required_parameters","title":"<code>get_required_parameters()</code>","text":"<p>Create a mapping of each module to the parameters required by that module.</p> <p>Returns:</p> Name Type Description <code>required_params</code> <code>dict</code> <p>A dictionary mapping module names to their required parameters.</p>"},{"location":"api_reference/#pycamps.simulation.dynamics.Dynamics.linearized_analysis","title":"<code>linearized_analysis(xf=None)</code>","text":"<p>Given the system dynamics, perform a linearized analysis of the system.</p> <p>Parameters:</p> Name Type Description Default <code>xf</code> <code>Optional[ndarray]</code> <p>Final state values for the linearized analysis, defaults to a random uniform NumPy array.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>pf</code> <code>Optional[ndarray]</code> <p>Participation factors of states contributing to instability.</p> <code>states</code> <code>Optional[ndarray]</code> <p>Names of states contributing to instability.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If xf has the wrong length.</p>"},{"location":"api_reference/#pycamps.simulation.dynamics.Dynamics.load_new_params","title":"<code>load_new_params(params_directory=None, custom_module_files=None, params_dictionary=None, reference_frame={sp.Symbol('dphidt', real=True): 1, sp.Symbol('phi', real=True): 0})</code>","text":"<p>Loads new parameters from a directory, custom mapping, or a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>params_directory</code> <code>Optional[str]</code> <p>The path to the directory containing parameter files. Files should be named 'module_name.mat' or 'module_name.json'.</p> <code>None</code> <code>custom_module_files</code> <code>Optional[dict]</code> <p>A dictionary mapping module names to custom parameter files. File paths should be full paths.</p> <code>None</code> <code>params_dictionary</code> <code>Optional[dict]</code> <p>A dictionary containing parameters. Keys should be parameter names in the form of '{parameter_name}_{module_name}'.</p> <code>None</code> <code>reference_frame</code> <code>Optional[dict]</code> <p>A dictionary specifying the reference frame.</p> <code>{Symbol('dphidt', real=True): 1, Symbol('phi', real=True): 0}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If a required parameter is missing or if the number of states and equations do not match.</p>"},{"location":"api_reference/#pycamps.simulation.dynamics.Dynamics.save_dynamics","title":"<code>save_dynamics(file_path=None)</code>","text":"<p>Saves the dynamics object to a pickle file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Optional[str]</code> <p>The path to the file where the dynamics object will be saved.</p> <code>None</code>"},{"location":"api_reference/#pycamps.simulation.dynamics.Dynamics.simulate_trajectory","title":"<code>simulate_trajectory(xf=None, simulation_time=0.1, method='trapezoid_adaptive')</code>","text":"<p>Given the system dynamics, simulate the trajectory of the system. Supported methods are 'trapezoid_adaptive', 'LSODA', 'RK45', 'RK23', 'DOP853', 'Radau', 'BDF'</p> <p>Parameters:</p> Name Type Description Default <code>xf</code> <code>Optional[ndarray]</code> <p>Final state values, defaults to a random uniform NumPy array.</p> <code>None</code> <code>simulation_time</code> <code>float</code> <p>The duration of the simulation.</p> <code>0.1</code> <code>method</code> <code>str</code> <p>The method to use for simulating the trajectory.</p> <code>'trapezoid_adaptive'</code> <p>Returns:</p> Name Type Description <code>time</code> <code>ndarray</code> <p>The time values of the simulation.</p> <code>states</code> <code>dict</code> <p>A dictionary of state values over time.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If xf has the wrong length.</p>"},{"location":"api_reference/#pycamps.simulation.dynamics.Dynamics.solve_equilibrium","title":"<code>solve_equilibrium(x0=None, options=None, method='fsolve')</code>","text":"<p>Given the system dynamics, solve for the equilibrium values of the system. Supported methods are 'fsolve', 'hybr', 'lm', 'broyden1', 'broyden2', 'anderson',   'linearmixing', 'diagbroyden', 'excitingmixing', 'krylov', 'df-sane'</p> <p>Parameters:</p> Name Type Description Default <code>x0</code> <code>Optional[ndarray]</code> <p>Initial guess for the equilibrium values, defaults to a random uniform NumPy array.</p> <code>None</code> <code>options</code> <code>Optional[dict]</code> <p>Options for the solver.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use for solving the equilibrium. </p> <code>'fsolve'</code> <p>Returns:</p> Name Type Description <code>xf</code> <code>ndarray</code> <p>The equilibrium values.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the equilibrium is not found or if x0 has the wrong length.</p>"},{"location":"api_reference/#pycamps.simulation.state_space.StateSpace","title":"<code>pycamps.simulation.state_space.StateSpace</code>","text":"<p>Represents a state space model for a power system or module.</p> <p>Parameters:</p> Name Type Description Default <code>system_name</code> <code>str</code> <p>The name of the system.</p> required <code>set_point_outputs</code> <code>Matrix</code> <p>A SymPy matrix of set point outputs.</p> required <code>set_point_output_equations</code> <code>Matrix</code> <p>A SymPy matrix of equations for set point outputs.</p> required <code>controllable_inputs</code> <code>Matrix</code> <p>A SymPy matrix of controllable inputs.</p> required <code>control_input_equations</code> <code>Matrix</code> <p>A SymPy matrix of equations for controllable inputs.</p> required <code>internal_inputs</code> <code>Matrix</code> <p>A SymPy matrix of internal inputs.</p> required <code>internal_equations</code> <code>Matrix</code> <p>A SymPy matrix of internal equations.</p> required <code>state_variable_derivatives</code> <code>Matrix</code> <p>A SymPy matrix of state variable derivatives.</p> required <code>state_space_equations</code> <code>Matrix</code> <p>A SymPy matrix of state space equations.</p> required <code>desired_state_variable_derivatives</code> <code>Matrix</code> <p>A SymPy matrix of desired state variable derivatives.</p> required <code>desired_state_space</code> <code>Matrix</code> <p>A SymPy matrix of desired state space equations.</p> required <code>state_variables</code> <code>Matrix</code> <p>A SymPy matrix of state variables.</p> required <code>desired_state_variables</code> <code>Matrix</code> <p>A SymPy matrix of desired state variables.</p> required <code>units</code> <code>list of str</code> <p>A list of units for the state variables.</p> required"},{"location":"api_reference/#pycamps.simulation.state_space.StateSpace.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Checks if two StateSpace instances are equal.</p>"},{"location":"api_reference/#pycamps.simulation.state_space.StateSpace.__str__","title":"<code>__str__()</code>","text":"<p>Returns a string representation of the StateSpace instance.</p>"},{"location":"api_reference/#pycamps.simulation.state_space.StateSpace.from_module","title":"<code>from_module(module)</code>  <code>cached</code> <code>classmethod</code>","text":"<p>Creates a StateSpace instance from a Module instance.</p>"},{"location":"api_reference/#pycamps.simulation.state_space.StateSpace.from_power_system","title":"<code>from_power_system(PS)</code>  <code>classmethod</code>","text":"<p>Creates a StateSpace instance from a PowerSystem instance.</p>"},{"location":"api_reference/#pycamps.simulation.state_space.StateSpace.print_equations","title":"<code>print_equations()</code>","text":"<p>Prints out the interconnected state space equations to the log stream.</p>"},{"location":"api_reference/#pycamps.simulation.state_space.StateSpace.print_vector_x","title":"<code>print_vector_x()</code>","text":"<p>Prints out the interconnected state space equations (dx) in a form suitable for  running the simulation directly. Also assigns value of each element of the  vector (x) into the respective state variables.</p>"},{"location":"api_reference/#pycamps.simulation.state_space.StateSpace.write_equations","title":"<code>write_equations(filename=None)</code>","text":"<p>Writes out the interconnected state space equations to a file.</p>"},{"location":"api_reference/#pycamps.simulation.state_space.StateSpace.write_vector_x","title":"<code>write_vector_x(filename=None)</code>","text":"<p>Writes the interconnected state space equations (dx) into a file in a form  suitable for running the simulation directly. Also assigns value of each element  of the vector (x) into the respective state variables.</p>"},{"location":"api_reference/#miscellaneous","title":"Miscellaneous","text":"<p>Example: <pre><code>    import os\n    os.environ['LOG_LEVEL'] = 'DEBUG'\n    configure_logging(log_to_console=True, log_to_file=True)\n    logger.debug(\"Test\")\n</code></pre></p>"},{"location":"api_reference/#pycamps.logger.configure_logging","title":"<code>pycamps.logger.configure_logging(logger_name='PyCAMPSLogger', log_file='app.log', log_to_console=True, log_to_file=False)</code>","text":"<p>Configures the logging settings for the application.</p> <p>This function sets up the logging configuration for the application. It allows you to log messages to the console, a file, or both. The log level can be controlled via the <code>LOG_LEVEL</code> environment variable.</p> <p>Parameters:</p> Name Type Description Default <code>logger_name</code> <code>str</code> <p>The name of the logger. Default is 'PyCAMPSLogger'.</p> <code>'PyCAMPSLogger'</code> <code>log_file</code> <code>str</code> <p>The name of the log file. Default is 'app.log'.</p> <code>'app.log'</code> <code>log_to_console</code> <code>bool</code> <p>If True, logs will be printed to the console. Default is True.</p> <code>True</code> <code>log_to_file</code> <code>bool</code> <p>If True, logs will be saved to a file. Default is False.</p> <code>False</code> Environment Variables <p>LOG_LEVEL (str): The log level for the logger. Can be 'DEBUG', 'INFO', 'WARNING', 'ERROR', or 'CRITICAL'.                  Default is 'INFO'.</p> Notes <ul> <li>If both <code>log_to_console</code> and <code>log_to_file</code> are set to False, no logs will be output.</li> <li>The log file will be saved in the user's home directory if <code>log_to_file</code> is True.</li> <li>Existing handlers are cleared before adding new ones to avoid duplicate logs.</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#user-installation","title":"User Installation","text":"<p>Here's how you can install PyCAMPS:</p> <pre><code>pip install pycamps\n</code></pre>"},{"location":"installation/#developer-installation","title":"Developer Installation","text":"<p>Here's how you can install PyCAMPS for development:</p> <pre><code>git clone https://github.com/mit-eesg/PyCAMPS.git\ncd PyCAMPS\npython setup.py install\n</code></pre>"},{"location":"api_reference/misc/","title":"Misc","text":"<p>Example: <pre><code>    import os\n    os.environ['LOG_LEVEL'] = 'DEBUG'\n    configure_logging(log_to_console=True, log_to_file=True)\n    logger.debug(\"Test\")\n</code></pre></p>"},{"location":"api_reference/misc/#pycamps.logger.configure_logging","title":"<code>pycamps.logger.configure_logging(logger_name='PyCAMPSLogger', log_file='app.log', log_to_console=True, log_to_file=False)</code>","text":"<p>Configures the logging settings for the application.</p> <p>This function sets up the logging configuration for the application. It allows you to log messages to the console, a file, or both. The log level can be controlled via the <code>LOG_LEVEL</code> environment variable.</p> <p>Parameters:</p> Name Type Description Default <code>logger_name</code> <code>str</code> <p>The name of the logger. Default is 'PyCAMPSLogger'.</p> <code>'PyCAMPSLogger'</code> <code>log_file</code> <code>str</code> <p>The name of the log file. Default is 'app.log'.</p> <code>'app.log'</code> <code>log_to_console</code> <code>bool</code> <p>If True, logs will be printed to the console. Default is True.</p> <code>True</code> <code>log_to_file</code> <code>bool</code> <p>If True, logs will be saved to a file. Default is False.</p> <code>False</code> Environment Variables <p>LOG_LEVEL (str): The log level for the logger. Can be 'DEBUG', 'INFO', 'WARNING', 'ERROR', or 'CRITICAL'.                  Default is 'INFO'.</p> Notes <ul> <li>If both <code>log_to_console</code> and <code>log_to_file</code> are set to False, no logs will be output.</li> <li>The log file will be saved in the user's home directory if <code>log_to_file</code> is True.</li> <li>Existing handlers are cleared before adding new ones to avoid duplicate logs.</li> </ul>"},{"location":"api_reference/modules/","title":"Modules","text":"<p>Modules are the building blocks of PyCAMPS. They are used to represent different components of a power system, such as buses, lines, and generators. Each module can be classified as a generator, load, wire, renewable, storage, or other system element.</p>"},{"location":"api_reference/modules/#pycamps.modules.Module","title":"<code>pycamps.modules.Module</code>","text":"<p>This module serves as a superclass to all dynamic component modules in the power system. </p> <p>Attributes:</p> Name Type Description <code>ModuleName</code> <code>str</code> <p>The name of the module.</p> <code>RefFrameAngle</code> <code>Symbol</code> <p>The angular position of the DQ reference frame.</p> <code>RefFrameSpeed</code> <code>Symbol</code> <p>The angular speed of the DQ reference frame.</p> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system (inverse of time units).</p> <code>ParameterMap</code> <code>dict</code> <p>A dictionary mapping parameter names to their values or functions.</p> <code>Parameters</code> <code>Matrix</code> <p>A matrix of symbolic parameters for the module (inductances, capacitances, etc).</p> <code>ControllerGains</code> <code>Matrix</code> <p>Gains of controllers.</p> <code>SetPoints</code> <code>Matrix</code> <p>Set points for controllers.</p> <code>StateVariables</code> <code>Matrix</code> <p>A matrix of symbolic state variables for the module.</p> <code>StateSpaceEquations</code> <code>Matrix</code> <p>A matrix of state space equations.</p> <code>StateVariableDerivatives</code> <code>Matrix</code> <p>A matrix of derivatives of state variables.</p> <code>PortInputs</code> <code>Matrix</code> <p>Inputs to the module from other modules.</p> <code>PortStates</code> <code>Matrix</code> <p>States of the module.</p> <code>PortVoltages</code> <code>Matrix</code> <p>Voltages at the ports.</p> <code>PortCurrents</code> <code>Matrix</code> <p>Currents at the ports.</p> <code>PortStates_Time</code> <code>Matrix</code> <p>Time-dependent states of the module.</p> <code>PortStateDerivatives</code> <code>Matrix</code> <p>Derivatives of the port states.</p> <code>PortOutputTypes</code> <code>Matrix</code> <p>Types of outputs from the ports (current or charge).</p> <code>ControllableInputs</code> <code>Matrix</code> <p>Inputs that can be controlled, typically for passivity-based control.</p> <code>InternalInputs</code> <code>Matrix</code> <p>Inputs that are internal to the module.</p> <code>ControlInputEquations</code> <code>Matrix</code> <p>Mathematical equations for controllable inputs.</p> <code>InternalEquations</code> <code>Matrix</code> <p>Internal equations of the module.</p> <code>DesiredStateVariables</code> <code>Matrix</code> <p>Desired state variables for underactuated systems.</p> <code>DesiredStateVariableDerivatives</code> <code>Matrix</code> <p>Derivatives of the desired state variables.</p> <code>DesiredStateSpace</code> <code>Matrix</code> <p>Desired state space representation.</p> <code>SetPointOutputs</code> <code>Matrix</code> <p>Outputs that are sent to another module.</p> <code>SetPointOutputEquations</code> <code>Matrix</code> <p>Equations for set point outputs.</p> <code>GTemp</code> <code>Matrix</code> <p>Temporary matrix for calculations.</p> <code>Units</code> <code>list of str</code> <p>The units of the state variables, which depend on the base speed.</p> <code>Data</code> <code>Matrix</code> <p>Additional data related to the module.</p> <code>StateSpace</code> <code>StateSpace</code> <p>State space representation of the module.</p>"},{"location":"api_reference/modules/#generators","title":"Generators","text":"<p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import SMOneAxis\n    sm = SMOneAxis('G1', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import Type4_1\n    sm = Type4_1('G1', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import Type4_1Gc\n    sm = Type4_1Gc('G1', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import Type4_2\n    sm = Type4_2('G1', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import Type4_2Ec\n    sm = Type4_2Ec('G1', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import SM7StateControl\n    sm = SM7StateControl('G22', BaseSpeed=377)\n</code></pre></p>"},{"location":"api_reference/modules/#pycamps.modules.SMOneAxis","title":"<code>pycamps.modules.SMOneAxis</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents the one axis model of synchronous machine.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/modules/#pycamps.modules.Type4_1","title":"<code>pycamps.modules.Type4_1</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a standard Type 4-1 model of a synchronous machine.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/modules/#pycamps.modules.Type4_1Gc","title":"<code>pycamps.modules.Type4_1Gc</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a standard Type 4-1 model of a synchronous machine with governor control.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/modules/#pycamps.modules.Type4_2","title":"<code>pycamps.modules.Type4_2</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a standard Type 4-2 model of a synchronous machine.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/modules/#pycamps.modules.Type4_2Ec","title":"<code>pycamps.modules.Type4_2Ec</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a standard Type 4-2 model of a synchronous machine with excitation control.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/modules/#pycamps.modules.SM7StateControl","title":"<code>pycamps.modules.SM7StateControl</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a synchronous machine with the seven state variables and control. WARNING: This module is still under development and is not yet functional</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code> Example <p>from sympy import symbols from pycamps.modules import SM7StateControl sm = SM7StateControl('G1', RefFrameAngle=symbols('phi'), RefFrameSpeed=symbols('dphidt'), BaseSpeed=377)</p>"},{"location":"api_reference/modules/#loads","title":"Loads","text":"<p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import PQLoad\n    load = PQLoad('L1', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import RLLoad\n    load = RLLoad('L1', BaseSpeed=377)\n</code></pre></p>"},{"location":"api_reference/modules/#pycamps.modules.PQLoad","title":"<code>pycamps.modules.PQLoad</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a PQ load in a power system.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/modules/#pycamps.modules.RLLoad","title":"<code>pycamps.modules.RLLoad</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a constant impedance load with resistance and inductance.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/modules/#wires","title":"Wires","text":"<p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import LongLine\n    long_line = LongLine('TL_1_2', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import ShortLine\n    line = ShortLine('TL_1_2', BaseSpeed=377)\n</code></pre></p>"},{"location":"api_reference/modules/#pycamps.modules.LongLine","title":"<code>pycamps.modules.LongLine</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a long transmission line model with resistance, capacitance, and inductances.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/modules/#pycamps.modules.ShortLine","title":"<code>pycamps.modules.ShortLine</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a short transmission line model with series impedance.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/modules/#renewables","title":"Renewables","text":"<p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import PVSOAControl\n    pv = PVSOAControl('PV1', BaseSpeed=377)\n</code></pre></p> <p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import PVSOAControlV2\n    pv = PVSOAControlV2('PV1', BaseSpeed=377)\n</code></pre></p>"},{"location":"api_reference/modules/#pycamps.modules.PVSOAControl","title":"<code>pycamps.modules.PVSOAControl</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a solar PV model with SOA control.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/modules/#pycamps.modules.PVSOAControlV2","title":"<code>pycamps.modules.PVSOAControlV2</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents a solar PV model with SOA control.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>Mode</code> <code>str</code> <p>The mode of operation. Defaults to 'PQ'. Options are 'PQ' or 'Vt'.</p> <code>'PQ'</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/modules/#storage","title":"Storage","text":"<p>Coming soon!</p>"},{"location":"api_reference/modules/#system-elements","title":"System Elements","text":"<p>Example: <pre><code>    from sympy import symbols\n    from pycamps.modules import InfBus\n    inf_bus = InfBus('Bus1', BaseSpeed=377)\n</code></pre></p>"},{"location":"api_reference/modules/#pycamps.modules.InfBus","title":"<code>pycamps.modules.InfBus</code>","text":"<p>               Bases: <code>Module</code></p> <p>Represents an infinite bus with a constant voltage source and series impedance.</p> <p>Parameters:</p> Name Type Description Default <code>IndexName</code> <code>str</code> <p>A unique identifier for the module. This is used to create names for parameters and state variables.</p> required <code>RefFrameAngle</code> <code>Optional[Symbol]</code> <p>The angle of the reference frame. Defaults to a symbolic variable 'phi' if not provided.</p> <code>None</code> <code>RefFrameSpeed</code> <code>Optional[Symbol]</code> <p>The speed of the reference frame. Defaults to a symbolic variable 'dphidt' if not provided.</p> <code>None</code> <code>BaseSpeed</code> <code>float</code> <p>The base speed of the system. Defaults to 1. This affects the units of the state variables.</p> <code>1</code> <code>ParamMap</code> <code>Optional[dict]</code> <p>A dictionary mapping parameter names to their values. Keys should be in the format '[ParameterName]_IndexName'.</p> <code>None</code>"},{"location":"api_reference/overview/","title":"Overview","text":"<p>PyCAMPS consists of several different classes and functions that allow the user to create and analyze power systems. Dynamic components of power systems are implemented in Modules, while the tools to simulate the modules and the overall  system lie in Simulation. For other extra functions, reference Miscellaneous.</p>"},{"location":"api_reference/simulation/","title":"Simulation","text":"<p>Example: <pre><code>    from pycamps.simulation import PowerSystem\n    from pycamps.modules import ShortLine, SMOneAxis, PQLoad\n    # Create modules like you normally would    \n    modules = [ShortLine(...), SMOneAxis(...), PQLoad(...)]\n    # Create and connect buses using the following format:\n    # [[(non-wire1), (wire1, 'terminal')],\n    #  [(non-wire2), (wire1, 'other_terminal')]]\n    buses = [[(modules[0], 'L'), (modules[1])],\n     [(modules[0], 'R'), (modules[2])]]\n    ps = PowerSystem(\"MyPowerSystem\", modules, buses)\n    print(ps.StateSpaceEquations)\n</code></pre></p> <p>Example: <pre><code>    from pycamps.simulation import PowerSystem, Dynamics\n    ps = PowerSystem(...) # Create power system like normal\n    dynamics = Dynamics(ps)\n    print(dynamics.get_required_parameters())\n    dynamics.load_new_params(params_directory='path/to/params/')\n    equilibrium = dynamics.solve_equilibrium()\n    time, states = dynamics.simulate_trajectory()\n    A, sub_pf, states = dynamics.linearized_analysis()\n</code></pre></p> <p>Example: <pre><code>    from pycamps.simulation import StateSpace, PowerSystem\n    ps = PowerSystem(...) # Create power system like normal\n    ss = StateSpace.from_power_system(ps)\n    ss.print_equations()\n</code></pre></p>"},{"location":"api_reference/simulation/#pycamps.simulation.power_system.PowerSystem","title":"<code>pycamps.simulation.power_system.PowerSystem</code>","text":"<p>Represents a power system composed of various modules and buses.</p> <p>Parameters:</p> Name Type Description Default <code>SystemName</code> <code>str</code> <p>A unique identifier for the system. This is used to create names for exported files and logs.</p> required <code>Modules</code> <code>list</code> <p>A list of modules (e.g. generators, loads, transmission lines) that make up the power system.</p> required <code>Buses</code> <code>list</code> <p>A list of buses, where each bus contains a list of modules connected to it.</p> required <p>Attributes:</p> Name Type Description <code>Units</code> <code>list</code> <p>Units for the state variables.</p> <code>StateSpace</code> <code>StateSpace</code> <p>State space representation of the system.</p> <code>KCLEquations</code> <code>Matrix</code> <p>KCL equations for the system.</p> <code>G</code> <code>ndarray</code> <p>G-matrix representing the connections between modules.</p> <code>StateVariableDerivatives</code> <code>Matrix</code> <p>Derivatives of the state variables.</p> <code>StateSpaceEquations</code> <code>Matrix</code> <p>State space equations for the system.</p> <code>DesiredStateVariableDerivatives</code> <code>Matrix</code> <p>Desired derivatives of the state variables.</p> <code>DesiredStateSpace</code> <code>Matrix</code> <p>Desired state space equations.</p> <code>ControllableInputs</code> <code>Matrix</code> <p>Inputs that can be controlled.</p> <code>InternalInputs</code> <code>Matrix</code> <p>Internal inputs to the system.</p> <code>ControlInputEquations</code> <code>Matrix</code> <p>Equations for control inputs.</p> <code>SetPointOutputs</code> <code>Matrix</code> <p>Outputs for set points.</p> <code>SetPointOutputEquations</code> <code>Matrix</code> <p>Equations for set point outputs.</p> <code>StateVariables</code> <code>Matrix</code> <p>State variables of the system.</p> <code>DesiredStateVariables</code> <code>Matrix</code> <p>Desired state variables.</p> <code>InternalEquations</code> <code>Matrix</code> <p>Internal equations of the system.</p> <code>Parameters</code> <code>Matrix</code> <p>Parameters of the system.</p> <code>SetPoints</code> <code>Matrix</code> <p>Set points for the system.</p> <code>ControllerGains</code> <code>Matrix</code> <p>Gains for the controllers.</p>"},{"location":"api_reference/simulation/#pycamps.simulation.dynamics.Dynamics","title":"<code>pycamps.simulation.dynamics.Dynamics</code>","text":"<p>Simulates the dynamics of a power system.</p> <p>Parameters:</p> Name Type Description Default <code>power_system</code> <code>PowerSystem</code> <p>The power system object containing modules and buses.</p> required <p>Attributes:</p> Name Type Description <code>PS</code> <code>PowerSystem</code> <p>The power system object.</p> <code>params</code> <code>dict</code> <p>A dictionary of parameters for the modules.</p> <code>input_states</code> <code>list</code> <p>A list of input state variables.</p> <code>input_equations</code> <code>list</code> <p>A list of input equations.</p> <code>required_params</code> <code>dict</code> <p>A dictionary mapping module names to their required parameters.</p>"},{"location":"api_reference/simulation/#pycamps.simulation.dynamics.Dynamics.get_required_parameters","title":"<code>get_required_parameters()</code>","text":"<p>Create a mapping of each module to the parameters required by that module.</p> <p>Returns:</p> Name Type Description <code>required_params</code> <code>dict</code> <p>A dictionary mapping module names to their required parameters.</p>"},{"location":"api_reference/simulation/#pycamps.simulation.dynamics.Dynamics.linearized_analysis","title":"<code>linearized_analysis(xf=None)</code>","text":"<p>Given the system dynamics, perform a linearized analysis of the system.</p> <p>Parameters:</p> Name Type Description Default <code>xf</code> <code>Optional[ndarray]</code> <p>Final state values for the linearized analysis, defaults to a random uniform NumPy array.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>pf</code> <code>Optional[ndarray]</code> <p>Participation factors of states contributing to instability.</p> <code>states</code> <code>Optional[ndarray]</code> <p>Names of states contributing to instability.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If xf has the wrong length.</p>"},{"location":"api_reference/simulation/#pycamps.simulation.dynamics.Dynamics.load_new_params","title":"<code>load_new_params(params_directory=None, custom_module_files=None, params_dictionary=None, reference_frame={sp.Symbol('dphidt', real=True): 1, sp.Symbol('phi', real=True): 0})</code>","text":"<p>Loads new parameters from a directory, custom mapping, or a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>params_directory</code> <code>Optional[str]</code> <p>The path to the directory containing parameter files. Files should be named 'module_name.mat' or 'module_name.json'.</p> <code>None</code> <code>custom_module_files</code> <code>Optional[dict]</code> <p>A dictionary mapping module names to custom parameter files. File paths should be full paths.</p> <code>None</code> <code>params_dictionary</code> <code>Optional[dict]</code> <p>A dictionary containing parameters. Keys should be parameter names in the form of '{parameter_name}_{module_name}'.</p> <code>None</code> <code>reference_frame</code> <code>Optional[dict]</code> <p>A dictionary specifying the reference frame.</p> <code>{Symbol('dphidt', real=True): 1, Symbol('phi', real=True): 0}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If a required parameter is missing or if the number of states and equations do not match.</p>"},{"location":"api_reference/simulation/#pycamps.simulation.dynamics.Dynamics.save_dynamics","title":"<code>save_dynamics(file_path=None)</code>","text":"<p>Saves the dynamics object to a pickle file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Optional[str]</code> <p>The path to the file where the dynamics object will be saved.</p> <code>None</code>"},{"location":"api_reference/simulation/#pycamps.simulation.dynamics.Dynamics.simulate_trajectory","title":"<code>simulate_trajectory(xf=None, simulation_time=0.1, method='trapezoid_adaptive')</code>","text":"<p>Given the system dynamics, simulate the trajectory of the system. Supported methods are 'trapezoid_adaptive', 'LSODA', 'RK45', 'RK23', 'DOP853', 'Radau', 'BDF'</p> <p>Parameters:</p> Name Type Description Default <code>xf</code> <code>Optional[ndarray]</code> <p>Final state values, defaults to a random uniform NumPy array.</p> <code>None</code> <code>simulation_time</code> <code>float</code> <p>The duration of the simulation.</p> <code>0.1</code> <code>method</code> <code>str</code> <p>The method to use for simulating the trajectory.</p> <code>'trapezoid_adaptive'</code> <p>Returns:</p> Name Type Description <code>time</code> <code>ndarray</code> <p>The time values of the simulation.</p> <code>states</code> <code>dict</code> <p>A dictionary of state values over time.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If xf has the wrong length.</p>"},{"location":"api_reference/simulation/#pycamps.simulation.dynamics.Dynamics.solve_equilibrium","title":"<code>solve_equilibrium(x0=None, options=None, method='fsolve')</code>","text":"<p>Given the system dynamics, solve for the equilibrium values of the system. Supported methods are 'fsolve', 'hybr', 'lm', 'broyden1', 'broyden2', 'anderson',   'linearmixing', 'diagbroyden', 'excitingmixing', 'krylov', 'df-sane'</p> <p>Parameters:</p> Name Type Description Default <code>x0</code> <code>Optional[ndarray]</code> <p>Initial guess for the equilibrium values, defaults to a random uniform NumPy array.</p> <code>None</code> <code>options</code> <code>Optional[dict]</code> <p>Options for the solver.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use for solving the equilibrium. </p> <code>'fsolve'</code> <p>Returns:</p> Name Type Description <code>xf</code> <code>ndarray</code> <p>The equilibrium values.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the equilibrium is not found or if x0 has the wrong length.</p>"},{"location":"api_reference/simulation/#pycamps.simulation.state_space.StateSpace","title":"<code>pycamps.simulation.state_space.StateSpace</code>","text":"<p>Represents a state space model for a power system or module.</p> <p>Parameters:</p> Name Type Description Default <code>system_name</code> <code>str</code> <p>The name of the system.</p> required <code>set_point_outputs</code> <code>Matrix</code> <p>A SymPy matrix of set point outputs.</p> required <code>set_point_output_equations</code> <code>Matrix</code> <p>A SymPy matrix of equations for set point outputs.</p> required <code>controllable_inputs</code> <code>Matrix</code> <p>A SymPy matrix of controllable inputs.</p> required <code>control_input_equations</code> <code>Matrix</code> <p>A SymPy matrix of equations for controllable inputs.</p> required <code>internal_inputs</code> <code>Matrix</code> <p>A SymPy matrix of internal inputs.</p> required <code>internal_equations</code> <code>Matrix</code> <p>A SymPy matrix of internal equations.</p> required <code>state_variable_derivatives</code> <code>Matrix</code> <p>A SymPy matrix of state variable derivatives.</p> required <code>state_space_equations</code> <code>Matrix</code> <p>A SymPy matrix of state space equations.</p> required <code>desired_state_variable_derivatives</code> <code>Matrix</code> <p>A SymPy matrix of desired state variable derivatives.</p> required <code>desired_state_space</code> <code>Matrix</code> <p>A SymPy matrix of desired state space equations.</p> required <code>state_variables</code> <code>Matrix</code> <p>A SymPy matrix of state variables.</p> required <code>desired_state_variables</code> <code>Matrix</code> <p>A SymPy matrix of desired state variables.</p> required <code>units</code> <code>list of str</code> <p>A list of units for the state variables.</p> required"},{"location":"api_reference/simulation/#pycamps.simulation.state_space.StateSpace.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Checks if two StateSpace instances are equal.</p>"},{"location":"api_reference/simulation/#pycamps.simulation.state_space.StateSpace.__str__","title":"<code>__str__()</code>","text":"<p>Returns a string representation of the StateSpace instance.</p>"},{"location":"api_reference/simulation/#pycamps.simulation.state_space.StateSpace.from_module","title":"<code>from_module(module)</code>  <code>cached</code> <code>classmethod</code>","text":"<p>Creates a StateSpace instance from a Module instance.</p>"},{"location":"api_reference/simulation/#pycamps.simulation.state_space.StateSpace.from_power_system","title":"<code>from_power_system(PS)</code>  <code>classmethod</code>","text":"<p>Creates a StateSpace instance from a PowerSystem instance.</p>"},{"location":"api_reference/simulation/#pycamps.simulation.state_space.StateSpace.print_equations","title":"<code>print_equations()</code>","text":"<p>Prints out the interconnected state space equations to the log stream.</p>"},{"location":"api_reference/simulation/#pycamps.simulation.state_space.StateSpace.print_vector_x","title":"<code>print_vector_x()</code>","text":"<p>Prints out the interconnected state space equations (dx) in a form suitable for  running the simulation directly. Also assigns value of each element of the  vector (x) into the respective state variables.</p>"},{"location":"api_reference/simulation/#pycamps.simulation.state_space.StateSpace.write_equations","title":"<code>write_equations(filename=None)</code>","text":"<p>Writes out the interconnected state space equations to a file.</p>"},{"location":"api_reference/simulation/#pycamps.simulation.state_space.StateSpace.write_vector_x","title":"<code>write_vector_x(filename=None)</code>","text":"<p>Writes the interconnected state space equations (dx) into a file in a form  suitable for running the simulation directly. Also assigns value of each element  of the vector (x) into the respective state variables.</p>"}]}